Wrote profile results to replace_rare_efficiency.py.lprof
Timer unit: 1e-06 s

File: replace_rare_efficiency.py
Function: replace_rare at line 1
Total time: 1.08121 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     1                                           @profile
     2                                           def replace_rare():
     3                                           
     4                                               """This program takes all of the words with counts < 5 and replaces
     5                                               thier name with '_RARE_' to estimate the emmission probability of 
     6                                               words not seen before"""
     7                                           
     8                                               """countsrcfile = raw_input("Count source file: ")
     9                                               trainsrcfile = raw_input("Training source file: ")
    10                                               destfile = raw_input("New training file destination: ")"""
    11                                           
    12         1            2      2.0      0.0      countsrcfile = "gene.counts"
    13         1            1      1.0      0.0      trainsrcfile = "short.train"
    14         1            0      0.0      0.0      destfile = "new.train"
    15                                           
    16         1           16     16.0      0.0      srcfreq = open(countsrcfile)
    17                                           
    18         1            1      1.0      0.0      rarewords = []
    19         1            1      1.0      0.0      rarecount = 0
    20                                           
    21     33507        24385      0.7      2.3      for line in srcfreq:
    22     33507        35375      1.1      3.3          parts = line.split(' ')
    23     33507        23958      0.7      2.2          if parts[1] == 'WORDTAG':
    24     33506        22692      0.7      2.1              word = parts[3]
    25     33506        41210      1.2      3.8              freq = int(parts[0])
    26                                                   
    27     33506        22593      0.7      2.1              if freq < 5:
    28                                                         #  print word
    29     26962        24458      0.9      2.3                  rarewords.append(word.strip())
    30     26962        19292      0.7      1.8                  rarecount += freq
    31                                                   else:
    32         1            1      1.0      0.0              break
    33                                           
    34         1           20     20.0      0.0      srctrain = open(trainsrcfile)
    35         1           39     39.0      0.0      dest = open(destfile, 'w')
    36                                           
    37         1            1      1.0      0.0      linnum =0
    38                                           
    39      3001         2716      0.9      0.3      for line in srctrain:
    40      3000         4212      1.4      0.4          words = line.split(' ')
    41      3000         2556      0.9      0.2          linnum += 1
    42                                                  # print linnum
    43                                           
    44      3000         2789      0.9      0.3          if len(words) == 2:
    45      2872       850461    296.1     78.7              if words[0] in rarewords:
    46       576          923      1.6      0.1                  dest.write('__RARE__ ' + words[1])
    47                                                       else:
    48      2296         3376      1.5      0.3                  dest.write(line)
    49                                                   else:
    50       128          128      1.0      0.0              dest.write(line)

